package com.su.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.su.chinaso.suchef.dish.CommentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT_ENTITY".
*/
public class CommentEntityDao extends AbstractDao<CommentEntity, Void> {

    public static final String TABLENAME = "COMMENT_ENTITY";

    /**
     * Properties of entity CommentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property DishId = new Property(1, int.class, "dishId", false, "DISH_ID");
        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
    };


    public CommentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CommentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT_ENTITY\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"DISH_ID\" INTEGER NOT NULL ," + // 1: dishId
                "\"COMMENT\" TEXT NOT NULL ," + // 2: comment
                "\"DATE\" TEXT);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDishId());
        stmt.bindString(3, entity.getComment());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDishId());
        stmt.bindString(3, entity.getComment());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CommentEntity readEntity(Cursor cursor, int offset) {
        CommentEntity entity = new CommentEntity( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // dishId
            cursor.getString(offset + 2), // comment
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentEntity entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setDishId(cursor.getInt(offset + 1));
        entity.setComment(cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CommentEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CommentEntity entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
